using System;
using System.Collections.Generic;

using DevoidEngine.Engine.Windowing;
using DevoidEngine.Engine.Rendering;

using DevoidEngine.Engine.Utilities;

using OpenTK.Windowing.Common;
using OpenTK.Graphics.OpenGL;

namespace DevoidEngine.Engine.Core
{
    class Devoid
    {
        private Scene Scene;
        private Renderer Renderer;
        private RenderingContext RenderingContext;
        private WorldRenderer WorldRenderer;

        public Input Input;
        public Time Time;

        public Devoid(int Width, int Height, Scene Scene)
        {
            LOG_MESSAGE("ENGINE CLASS CREATED");
            RenderingContext = new RenderingContext();
            this.Scene = Scene;
        }

        public void Init()
        {
            WindowContext.CreateWindow(1280, 720);
            Renderer = new Renderer();
            WorldRenderer = new WorldRenderer();
            this.Time = new Time();
            BindSystems();
        }

        public void Run()
        {
            Scene.SetEngine(this);
            this.Input = new Input(WindowContext.GetWindow().KeyboardState, WindowContext.GetWindow().MouseState);
            LOG_MESSAGE("[ENGINE]: RUN SETUP SUCCESS");
            WindowContext.RunWindow();
        }

        public void BindSystems()
        {
            wn.Load += InitGame;
            wn.UpdateFrame += UpdateGame;
            wn.RenderFrame += RenderGame;
            wn.Resize += WindowResize;
            wn.Unload += WindowQuit;
            LOG_MESSAGE("[ENGINE]: SYSTEM BIND SUCCESS");
        }

        public void InitGame()
        {
            Renderer.OnLoad();
            WorldRenderer.Init();
            Scene.Init();
            LOG_MESSAGE("[ENGINE]: STARTUP SUCCESS");
        }

        public void UpdateGame(FrameEventArgs args)
        {
            Scene.Update();
            //ModuleManager.EngineTick();
        }

        public void RenderGame(FrameEventArgs args)
        {
            Time.SetDeltaTime((float)args.Time);
            Renderer.PerFrameSetup();
            WorldRenderer.OnRender(ref RenderingContext);
            Scene.Render(ref RenderingContext);
            Renderer.Render(ref RenderingContext);
            Renderer.PerFrameEnd();
        }

        public void WindowQuit()
        {
            Renderer.OnUnload();
        }

        public void WindowResize(ResizeEventArgs args)
        {
            Renderer.OnResize(args.Width, args.Height);
        }


        public ref RenderingContext GetRenderingContext()
        {
            return ref RenderingContext;
        }

        public ref WindowAPI GetWindowContext()
        {
            return ref WindowContext;
        }

        public ref Renderer GetRenderer()
        {
            return ref Renderer;
        }

        public ref Scene GetCurrentScene()
        {
            return ref Scene;
        }

        public ref Input GetInputSystem()
        {
            return ref Input;
        }

        public static void LOG_MESSAGE(string message)
        {
        # if DEBUG
            Console.WriteLine("[DEBUG-MODE]" + message);
        #endif

        #if RELEASE
            Console.WriteLine("[RELEASE-MODE]" + message);
        # endif
        }
    }
}
